name: Distribute iOS .ipa
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the environment"
        required: true
        default: release
        type: choice
        options:
          - release
          - beta
      app:
        description: "Select app to distribute"
        required: true
        type: choice
        options:
          - todo_list

jobs:
  Build-And-Distribute-iOS:
    runs-on: macos-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Get current build_number
        id: build_number
        run: echo "build_number=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4.2.2

      - uses: actions/setup-java@v4.6.0
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up .p8 file
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" | base64 --decode > AuthKey.p8

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.12.3'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: 'Create application.config file'
        run: |
          cd apps/${{ github.event.inputs.app }}/assets/config/
          rm -rf application.config
          echo API_ENDPOINT="${{ secrets.API_ENDPOINT }}" >> application.config
          echo API_KEY=${{ secrets.API_KEY }} >> application.config
          cat application.config

      # - name: 'Generate Xcode project'
      #   run: |
      #     brew install xcodegen
      #     cd apps/${{ github.event.inputs.app }}/ios
      #     xcodegen
  
      - name: Get certificates
        id: generate_token
        env:
          ISSUER_ID: ${{ secrets.ISSUER_ID }}
          KEY_ID: ${{ secrets.KEY_ID }}
        run: |
          python3 xdistribution.py

      # - name: Set up certificate and provisioning profile
      #   run: |
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

      #     echo ${{ secrets.CERTIFICATE_DISTRIBUTION_P12 }} | base64 --decode > signingCertificate.p12
      #     echo "${{ secrets.PROVISIONING_PROFILE_DISTRIBUTION }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision

      #     security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" "${{ secrets.KEYCHAIN }}"
      #     security list-keychains -d user -s "${{ secrets.KEYCHAIN }}" $(security list-keychains -d user | sed s/\"//g)
      #     security set-keychain-settings "${{ secrets.KEYCHAIN }}"
      #     security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" "${{ secrets.KEYCHAIN }}"
      #     security import signingCertificate.p12 -k "${{ secrets.KEYCHAIN }}" -P "${{ secrets.CERT_PASSWORD }}" -A -T "/usr/bin/codesign" -T "/usr/bin/productsign"
      #     security set-key-partition-list -S apple-tool:,apple:, -s -k ${{ secrets.KEYCHAIN_PASSWORD }} -D "Apple Worldwide Developer Relations Certification Authority" -t private ${{ secrets.KEYCHAIN }}

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version: 3.24.3
      - run: |
          cd apps/${{ github.event.inputs.app }}
          flutter clean
          flutter pub get
          flutter build ipa --release --export-options-plist ios/ExportOptions.plist --build-number=${{ steps.build_number.outputs.build_number }} --split-debug-info=build/ios/debug-info

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: apps/${{ github.event.inputs.app }}/build/Runner.ipa

      # - name: Export Signed IPA
      #   run: |
      #     cd apps/${{ github.event.inputs.app }}

      #     xcodebuild \
      #     -workspace ios/Runner.xcworkspace \
      #     -scheme Runner \
      #     -sdk iphoneos \
      #     -configuration AppStoreDistribution archive \
      #     -archivePath build/Runner.xcarchive \
      #     clean archive \
      #     -allowProvisioningUpdates \
      #     MARKETING_VERSION=1.0.0 \
      #     CURRENT_PROJECT_VERSION=${{ steps.build_number.outputs.build_number }}

      #     xcodebuild \
      #     -exportArchive \
      #     -archivePath build/Runner.xcarchive \
      #     -exportOptionsPlist ios/exportOptions.plist \
      #     -exportPath build/Runner.ipa

      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.API_KEY }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.ISSUER_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.KEY_ID }}
        run: |
          cd apps/${{ github.event.inputs.app }}

          xcrun altool --upload-app -f build/Runner.ipa \
          --type ios \
          --apiKey ${{ secrets.KEY_ID }} \
          --apiIssuer ${{ secrets.ISSUER_ID }}